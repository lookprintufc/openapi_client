=begin
#Chat API SDK

#The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.

The version of the OpenAPI document: 1.0.0
Contact: sale@chat-api.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'cgi'

module OpenapiClient
  class Class6BanApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Test ban settings
    # Send the phone number to find out if the instance is banning it
    # @param ban_test_action [BanTestAction] 
    # @param [Hash] opts the optional parameters
    # @return [BanTestStatus]
    def ban_test(ban_test_action, opts = {})
      data, _status_code, _headers = ban_test_with_http_info(ban_test_action, opts)
      data
    end

    # Test ban settings
    # Send the phone number to find out if the instance is banning it
    # @param ban_test_action [BanTestAction] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BanTestStatus, Integer, Hash)>] BanTestStatus data, response status code and response headers
    def ban_test_with_http_info(ban_test_action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Class6BanApi.ban_test ...'
      end
      # verify the required parameter 'ban_test_action' is set
      if @api_client.config.client_side_validation && ban_test_action.nil?
        fail ArgumentError, "Missing the required parameter 'ban_test_action' when calling Class6BanApi.ban_test"
      end
      # resource path
      local_var_path = '/banTest'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(ban_test_action) 

      # return_type
      return_type = opts[:return_type] || 'BanTestStatus' 

      # auth_names
      auth_names = opts[:auth_names] || ['instanceId', 'token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Class6BanApi#ban_test\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get settings
    # **banPhoneMask** - Regular expression on which bans on numbers will be sent  **preBanMessage** - Warning message If it is set, a message will be sent before sending the ban.
    # @param [Hash] opts the optional parameters
    # @return [BanSettings]
    def get_ban_settings(opts = {})
      data, _status_code, _headers = get_ban_settings_with_http_info(opts)
      data
    end

    # Get settings
    # **banPhoneMask** - Regular expression on which bans on numbers will be sent  **preBanMessage** - Warning message If it is set, a message will be sent before sending the ban.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BanSettings, Integer, Hash)>] BanSettings data, response status code and response headers
    def get_ban_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Class6BanApi.get_ban_settings ...'
      end
      # resource path
      local_var_path = '/banSettings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'BanSettings' 

      # auth_names
      auth_names = opts[:auth_names] || ['instanceId', 'token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Class6BanApi#get_ban_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set settings
    # **banPhoneMask** - Regular expression on which bans on numbers will be sent  **preBanMessage** - Warning message If it is set, a message will be sent before sending the ban.
    # @param ban_settings [BanSettings] 
    # @param [Hash] opts the optional parameters
    # @return [BanSettings]
    def set_ban_settings(ban_settings, opts = {})
      data, _status_code, _headers = set_ban_settings_with_http_info(ban_settings, opts)
      data
    end

    # Set settings
    # **banPhoneMask** - Regular expression on which bans on numbers will be sent  **preBanMessage** - Warning message If it is set, a message will be sent before sending the ban.
    # @param ban_settings [BanSettings] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BanSettings, Integer, Hash)>] BanSettings data, response status code and response headers
    def set_ban_settings_with_http_info(ban_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Class6BanApi.set_ban_settings ...'
      end
      # verify the required parameter 'ban_settings' is set
      if @api_client.config.client_side_validation && ban_settings.nil?
        fail ArgumentError, "Missing the required parameter 'ban_settings' when calling Class6BanApi.set_ban_settings"
      end
      # resource path
      local_var_path = '/banSettings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'application/x-www-form-urlencoded'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(ban_settings) 

      # return_type
      return_type = opts[:return_type] || 'BanSettings' 

      # auth_names
      auth_names = opts[:auth_names] || ['instanceId', 'token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Class6BanApi#set_ban_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
