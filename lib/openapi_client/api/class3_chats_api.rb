=begin
#Chat API SDK

#The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.

The version of the OpenAPI document: 1.0.0
Contact: sale@chat-api.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'cgi'

module OpenapiClient
  class Class3ChatsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Adding participant to a group
    # @param group_participant_action [GroupParticipantAction] 
    # @param [Hash] opts the optional parameters
    # @return [GroupParticipantStatus]
    def add_group_participant(group_participant_action, opts = {})
      data, _status_code, _headers = add_group_participant_with_http_info(group_participant_action, opts)
      data
    end

    # Adding participant to a group
    # @param group_participant_action [GroupParticipantAction] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupParticipantStatus, Integer, Hash)>] GroupParticipantStatus data, response status code and response headers
    def add_group_participant_with_http_info(group_participant_action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Class3ChatsApi.add_group_participant ...'
      end
      # verify the required parameter 'group_participant_action' is set
      if @api_client.config.client_side_validation && group_participant_action.nil?
        fail ArgumentError, "Missing the required parameter 'group_participant_action' when calling Class3ChatsApi.add_group_participant"
      end
      # resource path
      local_var_path = '/addGroupParticipant'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(group_participant_action) 

      # return_type
      return_type = opts[:return_type] || 'GroupParticipantStatus' 

      # auth_names
      auth_names = opts[:auth_names] || ['instanceId', 'token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Class3ChatsApi#add_group_participant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Demote group participant
    # @param group_participant_action [GroupParticipantAction] 
    # @param [Hash] opts the optional parameters
    # @return [GroupParticipantStatus]
    def demote_group_participant(group_participant_action, opts = {})
      data, _status_code, _headers = demote_group_participant_with_http_info(group_participant_action, opts)
      data
    end

    # Demote group participant
    # @param group_participant_action [GroupParticipantAction] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupParticipantStatus, Integer, Hash)>] GroupParticipantStatus data, response status code and response headers
    def demote_group_participant_with_http_info(group_participant_action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Class3ChatsApi.demote_group_participant ...'
      end
      # verify the required parameter 'group_participant_action' is set
      if @api_client.config.client_side_validation && group_participant_action.nil?
        fail ArgumentError, "Missing the required parameter 'group_participant_action' when calling Class3ChatsApi.demote_group_participant"
      end
      # resource path
      local_var_path = '/demoteGroupParticipant'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(group_participant_action) 

      # return_type
      return_type = opts[:return_type] || 'GroupParticipantStatus' 

      # auth_names
      auth_names = opts[:auth_names] || ['instanceId', 'token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Class3ChatsApi#demote_group_participant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the chat list.
    # The chat list includes avatars.
    # @param [Hash] opts the optional parameters
    # @return [Chats]
    def get_chats(opts = {})
      data, _status_code, _headers = get_chats_with_http_info(opts)
      data
    end

    # Get the chat list.
    # The chat list includes avatars.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Chats, Integer, Hash)>] Chats data, response status code and response headers
    def get_chats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Class3ChatsApi.get_chats ...'
      end
      # resource path
      local_var_path = '/dialogs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Chats' 

      # auth_names
      auth_names = opts[:auth_names] || ['instanceId', 'token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Class3ChatsApi#get_chats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a group and sends the message to the created group.
    # The group will be added to the queue for sending and sooner or later it will be created, even if the phone is disconnected from the Internet or the authorization is not passed.   2 Oct 2018 update: chatId parameter will be returned if group was created on your phone within 20 second.
    # @param create_group_action [CreateGroupAction] 
    # @param [Hash] opts the optional parameters
    # @return [CreateGroupStatus]
    def group(create_group_action, opts = {})
      data, _status_code, _headers = group_with_http_info(create_group_action, opts)
      data
    end

    # Creates a group and sends the message to the created group.
    # The group will be added to the queue for sending and sooner or later it will be created, even if the phone is disconnected from the Internet or the authorization is not passed.   2 Oct 2018 update: chatId parameter will be returned if group was created on your phone within 20 second.
    # @param create_group_action [CreateGroupAction] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateGroupStatus, Integer, Hash)>] CreateGroupStatus data, response status code and response headers
    def group_with_http_info(create_group_action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Class3ChatsApi.group ...'
      end
      # verify the required parameter 'create_group_action' is set
      if @api_client.config.client_side_validation && create_group_action.nil?
        fail ArgumentError, "Missing the required parameter 'create_group_action' when calling Class3ChatsApi.group"
      end
      # resource path
      local_var_path = '/group'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(create_group_action) 

      # return_type
      return_type = opts[:return_type] || 'CreateGroupStatus' 

      # auth_names
      auth_names = opts[:auth_names] || ['instanceId', 'token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Class3ChatsApi#group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Make participant in the group an administrator
    # @param group_participant_action [GroupParticipantAction] 
    # @param [Hash] opts the optional parameters
    # @return [GroupParticipantStatus]
    def promote_group_participant(group_participant_action, opts = {})
      data, _status_code, _headers = promote_group_participant_with_http_info(group_participant_action, opts)
      data
    end

    # Make participant in the group an administrator
    # @param group_participant_action [GroupParticipantAction] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupParticipantStatus, Integer, Hash)>] GroupParticipantStatus data, response status code and response headers
    def promote_group_participant_with_http_info(group_participant_action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Class3ChatsApi.promote_group_participant ...'
      end
      # verify the required parameter 'group_participant_action' is set
      if @api_client.config.client_side_validation && group_participant_action.nil?
        fail ArgumentError, "Missing the required parameter 'group_participant_action' when calling Class3ChatsApi.promote_group_participant"
      end
      # resource path
      local_var_path = '/promoteGroupParticipant'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(group_participant_action) 

      # return_type
      return_type = opts[:return_type] || 'GroupParticipantStatus' 

      # auth_names
      auth_names = opts[:auth_names] || ['instanceId', 'token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Class3ChatsApi#promote_group_participant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Open chat for reading messages
    # Use this method to make users see their messages read.
    # @param read_chat_action [ReadChatAction] 
    # @param [Hash] opts the optional parameters
    # @return [ReadChatStatus]
    def read_chat(read_chat_action, opts = {})
      data, _status_code, _headers = read_chat_with_http_info(read_chat_action, opts)
      data
    end

    # Open chat for reading messages
    # Use this method to make users see their messages read.
    # @param read_chat_action [ReadChatAction] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReadChatStatus, Integer, Hash)>] ReadChatStatus data, response status code and response headers
    def read_chat_with_http_info(read_chat_action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Class3ChatsApi.read_chat ...'
      end
      # verify the required parameter 'read_chat_action' is set
      if @api_client.config.client_side_validation && read_chat_action.nil?
        fail ArgumentError, "Missing the required parameter 'read_chat_action' when calling Class3ChatsApi.read_chat"
      end
      # resource path
      local_var_path = '/readChat'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(read_chat_action) 

      # return_type
      return_type = opts[:return_type] || 'ReadChatStatus' 

      # auth_names
      auth_names = opts[:auth_names] || ['instanceId', 'token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Class3ChatsApi#read_chat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove participant from a group
    # @param group_participant_action [GroupParticipantAction] 
    # @param [Hash] opts the optional parameters
    # @return [GroupParticipantStatus]
    def remove_group_participant(group_participant_action, opts = {})
      data, _status_code, _headers = remove_group_participant_with_http_info(group_participant_action, opts)
      data
    end

    # Remove participant from a group
    # @param group_participant_action [GroupParticipantAction] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GroupParticipantStatus, Integer, Hash)>] GroupParticipantStatus data, response status code and response headers
    def remove_group_participant_with_http_info(group_participant_action, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Class3ChatsApi.remove_group_participant ...'
      end
      # verify the required parameter 'group_participant_action' is set
      if @api_client.config.client_side_validation && group_participant_action.nil?
        fail ArgumentError, "Missing the required parameter 'group_participant_action' when calling Class3ChatsApi.remove_group_participant"
      end
      # resource path
      local_var_path = '/removeGroupParticipant'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(group_participant_action) 

      # return_type
      return_type = opts[:return_type] || 'GroupParticipantStatus' 

      # auth_names
      auth_names = opts[:auth_names] || ['instanceId', 'token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Class3ChatsApi#remove_group_participant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
