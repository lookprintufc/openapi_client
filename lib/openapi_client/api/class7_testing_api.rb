=begin
#Chat API SDK

#The SDK allows you to receive and send messages through your WhatsApp account. [Sign up now](https://app.chat-api.com/)  The Chat API is based on the WhatsApp WEB protocol and excludes the ban both when using libraries from mgp25 and the like. Despite this, your account can be banned by anti-spam system WhatsApp after several clicking the \"block\" button.

The version of the OpenAPI document: 1.0.0
Contact: sale@chat-api.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'cgi'

module OpenapiClient
  class Class7TestingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    def check_phone(opts = {})
      data, _status_code, _headers = check_phone_with_http_info(opts)
      data
    end

    def check_phone_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Class7TestingApi.check_phone ...'
      end

      # resource path
      local_var_path = '/check_phone'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CheckPhone' 

      # auth_names
      auth_names = opts[:auth_names] || ['instanceId', 'token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Class7TestingApi#check_phone\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers

  
    end







    # Returns instance status changes history.
    # Requires enable \"instanceStatuses\" option for collecting data.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :min_time Filter statuses received after specified date. Example: 946684800.
    # @option opts [Integer] :max_time Filter statuses received before specified date. Example: 946684800.
    # @return [Statuses]
    def instance_statuses(opts = {})
      data, _status_code, _headers = instance_statuses_with_http_info(opts)
      data
    end

    # Returns instance status changes history.
    # Requires enable \&quot;instanceStatuses\&quot; option for collecting data.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :min_time Filter statuses received after specified date. Example: 946684800.
    # @option opts [Integer] :max_time Filter statuses received before specified date. Example: 946684800.
    # @return [Array<(Statuses, Integer, Hash)>] Statuses data, response status code and response headers
    def instance_statuses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Class7TestingApi.instance_statuses ...'
      end
      # resource path
      local_var_path = '/instanceStatuses'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'min_time'] = opts[:'min_time'] if !opts[:'min_time'].nil?
      query_params[:'max_time'] = opts[:'max_time'] if !opts[:'max_time'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Statuses' 

      # auth_names
      auth_names = opts[:auth_names] || ['instanceId', 'token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Class7TestingApi#instance_statuses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns webhook status for message.
    # Requires enable \"webhookStatuses\" option for collecting data.
    # @param msg_id [String] Message ID. Example: false_17472822486@c.us_DF38E6A25B42CC8CCE57EC40F.
    # @param [Hash] opts the optional parameters
    # @return [WebhookStatus]
    def webhook_statuses(msg_id, opts = {})
      data, _status_code, _headers = webhook_statuses_with_http_info(msg_id, opts)
      data
    end

    # Returns webhook status for message.
    # Requires enable \&quot;webhookStatuses\&quot; option for collecting data.
    # @param msg_id [String] Message ID. Example: false_17472822486@c.us_DF38E6A25B42CC8CCE57EC40F.
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebhookStatus, Integer, Hash)>] WebhookStatus data, response status code and response headers
    def webhook_statuses_with_http_info(msg_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: Class7TestingApi.webhook_statuses ...'
      end
      # verify the required parameter 'msg_id' is set
      if @api_client.config.client_side_validation && msg_id.nil?
        fail ArgumentError, "Missing the required parameter 'msg_id' when calling Class7TestingApi.webhook_statuses"
      end
      # resource path
      local_var_path = '/webhookStatus'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'msgId'] = msg_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'WebhookStatus' 

      # auth_names
      auth_names = opts[:auth_names] || ['instanceId', 'token']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: Class7TestingApi#webhook_statuses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
